!function(){"use strict";class e{constructor(e,t,s,n,r,o){this.name=e.name,this.link=e.link,this._likes=e.likes,this._id=e._id,this._owner=e.owner,this._currentUserId=o,this.templateSelector=t,this._handleCardClick=s,this._handleCardLike=r,this._handleCardDelete=n}getId(){return this._id}_setMarkup(){this._cardImage=this._cardElement.querySelector(".card__image"),this._cardImage.src=this.link,this._cardImage.alt=this.name,this._cardElement.querySelector(".card__bottom-text").textContent=this.name}_renderLikes(){this._cardElement.querySelector(".card__bottom-count").textContent=this._likes.length,this.likeButton=this._cardElement.querySelector(".card__bottom-button"),this.isLikedByUser()?this.likeButton.classList.add("card__bottom-button_clicked"):this.likeButton.classList.remove("card__bottom-button_clicked")}setLikes(e){this._likes=e,this._renderLikes()}_getTemplateClone(){return document.querySelector(this.templateSelector).content.querySelector(".card").cloneNode(!0)}isLikedByUser(){return this._likes.some((e=>e._id===this._currentUserId))}_setEventListeners(){this._cardElement.querySelector(".card__bottom-button").addEventListener("click",(()=>{this._handleCardLike(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleCardDelete(this)})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleCardClick(this)}))}deleteCard(){this._cardElement.remove(),this._cardElement=null}generateCard(){return this._cardElement=this._getTemplateClone(),this._deleteButton=this._cardElement.querySelector(".card__delete"),this._currentUserId!==this._owner._id&&this._deleteButton.remove(),this._setMarkup(),this._setEventListeners(),this._renderLikes(),this._cardElement}}class t{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector)}enableValidation(){this._setEventListeners()}_setEventListeners(){this._toggleButtonState(),this._formElement.addEventListener("reset",(()=>{this._resetValidation()})),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._toggleInputError(e),this._toggleButtonState(this._inputList,this._buttonElement)}))}))}_toggleInputError(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_showInputError(e,t){const s=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._settings.inputErrorClass),s.textContent=t,s.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_enableButton(){this._buttonElement.disabled=!1,this._buttonElement.classList.remove(this._settings.inactiveButtonClass)}_disableButton(){this._buttonElement.disabled=!0,this._buttonElement.classList.add(this._settings.inactiveButtonClass)}_toggleButtonState(){this._hasInvalidInput(this._inputList)?this._disableButton():this._enableButton()}_resetValidation(){this._disableButton(),this._inputList.forEach((e=>{this._hideInputError(e)}))}}function s(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class n{constructor(e){s(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.closePopup()})),s(this,"_handleClickClose",(e=>{e.target===e.currentTarget&&this.closePopup()})),this._popupElement=e,this._popupExit=this._popupElement.querySelector(".modal__container-exit")}openPopup(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("mousedown",this._handleClickClose)}closePopup(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("mousedown",this._handleClickClose)}setEventListeners(){this._popupExit.addEventListener("click",(e=>{this.closePopup()}))}}class r extends n{constructor(e,t){super(e),this._handleFormSubmit=t,this._formElement=this._popupElement.querySelector(".form"),this._inputList=this._formElement.querySelectorAll(".form__input"),this._buttonTextContainer=this._formElement.querySelector(".form__save"),this._defaultButtonText=this._buttonTextContainer.textContent}setLoadingText(e){this._buttonTextContainer.textContent=e?"Saving...":this._defaultButtonText}_getInputValues(){const e={};return this._inputList.forEach((t=>e[t.name]=t.value)),e}setEventListeners(){this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}closePopup(){super.closePopup(),this._formElement.reset()}}class o{constructor(e,t){let{data:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach(this._renderer)}addItem(e){this._container.prepend(e)}}document.querySelector(".elements__grid");const i=document.querySelector("#name-input"),a=document.querySelector("#description-input"),l=(document.querySelector(".profile__info-name").textContent,document.querySelector(".profile__info-description").textContent,document.querySelector("#title-input")),c=document.querySelector("#link-input"),d=document.querySelector("#addCard"),u=document.querySelector(".profile__edit"),h=document.querySelector(".profile__add"),_=document.querySelector("#edit"),p=(_.querySelector(".form"),d.querySelector(".form")),m=(document.querySelectorAll(".modal__container-exit"),p.querySelector("button"),document.querySelector("#editAvatar")),E=m.querySelector("#avatar-link-input"),f=document.querySelector(".profile__image-avatar"),v=document.querySelector("#editAvatarButton"),C=document.querySelector("#pictureModal"),g=document.querySelector("#deleteCardModal"),S={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__save",inactiveButtonClass:"form__save_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"},y=Array.from(document.querySelectorAll(S.formSelector));let L=null;const b=new class{constructor(e){let{nameSelector:t,descriptionSelector:s,avatarSelector:n}=e;this._nameContainer=document.querySelector(t),this._descriptionContainer=document.querySelector(s),this._avatarContainer=document.querySelector(n)}getUserInfo(){return{name:this._nameContainer.textContent,about:this._descriptionContainer.textContent,avatar:this._avatarContainer.src}}setUserInfo(e){let{name:t,about:s,avatar:n}=e;this._nameContainer.textContent=t,this._descriptionContainer.textContent=s,this._avatarContainer.src=n}}({nameSelector:".profile__info-name",descriptionSelector:".profile__info-description",avatarSelector:".profile__image-avatar"}),k=new class{constructor(e){this.options=e,this.baseUrl=this.options.baseUrl,this.headers=this.options.headers}_handleResponse(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}getInitialCards(){return fetch("".concat(this.baseUrl,"/cards"),{headers:this.headers}).then((e=>this._handleResponse(e)))}getUserData(){return fetch("".concat(this.baseUrl,"/users/me"),{headers:this.headers}).then((e=>this._handleResponse(e)))}updateUserInfo(e){return fetch("".concat(this.baseUrl,"/users/me"),{method:"PATCH",headers:this.headers,body:JSON.stringify(e)}).then((e=>this._handleResponse(e)))}updateProfilePicture(e){return fetch("".concat(this.baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this.headers,body:JSON.stringify(e)}).then((e=>this._handleResponse(e)))}addNewCard(e){return fetch("".concat(this.baseUrl,"/cards"),{method:"POST",headers:this.headers,body:JSON.stringify({name:e.name,link:e.link})}).then((e=>this._handleResponse(e)))}deleteCard(e){return fetch("".concat(this.baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this.headers}).then((e=>this._handleResponse(e)))}likeCard(e){return fetch("".concat(this.baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this.headers}).then((e=>this._handleResponse(e)))}unlikeCard(e){return fetch("".concat(this.baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this.headers}).then((e=>this._handleResponse(e)))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"dfa974a3-627e-4477-8e0f-f2d5983e285f","Content-Type":"application/json"}});let q;Promise.all([k.getUserData(),k.getInitialCards()]).then((e=>{let[t,s]=e;b.setUserInfo(t),L=t._id,q=new o({data:s,renderer:x},".elements__grid"),q.renderItems()})).catch((e=>{console.log(e)}));const x=t=>{const s=new e(t,"#card-template",A,R,w,L).generateCard();q.addItem(s)},I=new r(d,(function(){const e={name:l.value,link:c.value};I.setLoadingText(!0),k.addNewCard(e).then((e=>{x(e)})).catch((e=>{console.log(e)})).finally((()=>{I.setLoadingText(!1),I.closePopup()}))}));I.setEventListeners();const P=new r(_,(function(){const e={name:i.value,about:a.value};P.setLoadingText(!0),k.updateUserInfo(e).then((e=>{b.setUserInfo(e)})).catch((e=>{console.log(e)})).finally((()=>{P.setLoadingText(!1),P.closePopup()}))}));P.setEventListeners();const T=new r(m,(function(){const e={avatar:E.value};T.setLoadingText(!0),k.updateProfilePicture(e).then((e=>{f.src=e.avatar})).catch((e=>{console.log(e)})).finally((()=>{T.setLoadingText(!1),T.closePopup()}))}));T.setEventListeners();const B=new class extends n{constructor(e,t){super(e),this._handleFormSubmit=t,this._formElement=this._popupElement.querySelector(".form"),this._buttonTextContainer=this._formElement.querySelector(".form__save"),this._defaultButtonText=this._buttonTextContainer.textContent}setLoadingText(e){this._buttonTextContainer.textContent=e?"Saving...":this._defaultButtonText}openPopup(e){this._card=e,super.openPopup()}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._card)}))}}(g,(function(e){k.deleteCard(e.getId()).then((()=>{e.deleteCard()})).catch((e=>{console.log(e)})),B.closePopup()}));B.setEventListeners();const U=new class extends n{constructor(e){super(e),this._popupImage=this._popupElement.querySelector(".modal__picture-image"),this._popupText=this._popupElement.querySelector(".modal__picture-text")}openPopup(e){this._popupImage.src=e.link,this._popupImage.alt=e.name,this._popupText.textContent=e.name,super.openPopup()}}(C);function w(e){e.isLikedByUser()?k.unlikeCard(e.getId()).then((t=>e.setLikes(t.likes))).catch((e=>console.log(e))):k.likeCard(e.getId()).then((t=>e.setLikes(t.likes))).catch((e=>console.log(e)))}function A(e){U.openPopup(e)}function R(e){B.openPopup(e)}U.setEventListeners(),u.addEventListener("click",(function(){const e=b.getUserInfo();i.value=e.name,a.value=e.about,P.openPopup()})),h.addEventListener("click",(function(){I.openPopup()})),v.addEventListener("click",(function(){T.openPopup()})),y.forEach((e=>{!function(e,s){new t(e,s).enableValidation()}(S,e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,