!function(){"use strict";class e{constructor(e,t,n,s,r,o){this.name=e.name,this.link=e.link,this._likes=e.likes,this._id=e._id,this._owner=e.owner,this._currentUserId=o,this.templateSelector=t,this._handleCardClick=n,this._handleCardLike=r,this._handleCardDelete=s}getId(){return this._id}_setMarkup(){this._cardImage=this._cardElement.querySelector(".card__image"),this._cardImage.src=this.link,this._cardImage.alt=this.name,this._cardElement.querySelector(".card__bottom-text").textContent=this.name}_renderLikes(){this._likeCount.textContent=this._likes.length,this.isLikedByUser()?this._likeButton.classList.add("card__bottom-button_clicked"):this._likeButton.classList.remove("card__bottom-button_clicked")}setLikes(e){this._likes=e,this._renderLikes()}_getTemplateClone(){return document.querySelector(this.templateSelector).content.querySelector(".card").cloneNode(!0)}isLikedByUser(){return this._likes.some((e=>e._id===this._currentUserId))}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleCardLike(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleCardDelete(this)})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleCardClick(this)}))}deleteCard(){this._cardElement.remove(),this._cardElement=null}generateCard(){return this._cardElement=this._getTemplateClone(),this._deleteButton=this._cardElement.querySelector(".card__delete"),this._likeCount=this._cardElement.querySelector(".card__bottom-count"),this._likeButton=this._cardElement.querySelector(".card__bottom-button"),this._currentUserId!==this._owner._id&&this._deleteButton.remove(),this._setMarkup(),this._setEventListeners(),this._renderLikes(),this._cardElement}}class t{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector)}enableValidation(){this._setEventListeners()}_setEventListeners(){this._formElement.addEventListener("reset",(()=>{this.resetValidation()})),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._toggleInputError(e),this._toggleButtonState(this._inputList,this._buttonElement)}))}))}_toggleInputError(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_showInputError(e,t){const n=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._settings.inputErrorClass),n.textContent=t,n.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_enableButton(){this._buttonElement.disabled=!1,this._buttonElement.classList.remove(this._settings.inactiveButtonClass)}_disableButton(){this._buttonElement.disabled=!0,this._buttonElement.classList.add(this._settings.inactiveButtonClass)}_toggleButtonState(){this._hasInvalidInput(this._inputList)?this._disableButton():this._enableButton()}resetValidation(){this._disableButton(),this._inputList.forEach((e=>{this._hideInputError(e)}))}}function n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class s{constructor(e){n(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.closePopup()})),n(this,"_handleClickClose",(e=>{e.target===e.currentTarget&&this.closePopup()})),this._popupElement=e,this._popupExit=this._popupElement.querySelector(".modal__container-exit")}openPopup(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("mousedown",this._handleClickClose)}closePopup(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("mousedown",this._handleClickClose)}setEventListeners(){this._popupExit.addEventListener("click",(e=>{this.closePopup()}))}}class r extends s{constructor(e,t){super(e),this._handleFormSubmit=t,this._formElement=this._popupElement.querySelector(".form"),this._inputList=this._formElement.querySelectorAll(".form__input"),this._buttonTextContainer=this._formElement.querySelector(".form__save"),this._defaultButtonText=this._buttonTextContainer.textContent}setLoadingText(e){this._buttonTextContainer.textContent=e?"Saving...":this._defaultButtonText}_getInputValues(){const e={};return this._inputList.forEach((t=>e[t.name]=t.value)),e}setEventListeners(){this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}openPopup(){this._formElement.reset(),super.openPopup()}}class o{constructor(e,t){let{data:n,renderer:s}=e;this._items=n,this._renderer=s,this._container=document.querySelector(t)}renderItems(){this._items.forEach(this._renderer)}addItem(e){this._container.prepend(e)}}document.querySelector(".elements__grid");const i=document.querySelector("#name-input"),a=document.querySelector("#description-input"),l=(document.querySelector(".profile__info-name").textContent,document.querySelector(".profile__info-description").textContent,document.querySelector("#title-input")),c=document.querySelector("#link-input"),d=document.querySelector("#addCard"),u=document.querySelector(".profile__edit"),h=document.querySelector(".profile__add"),_=document.querySelector("#edit"),p=(_.querySelector(".form"),d.querySelector(".form")),m=(document.querySelectorAll(".modal__container-exit"),p.querySelector("button"),document.querySelector("#editAvatar")),E=m.querySelector("#avatar-link-input"),f=(document.querySelector(".profile__image-avatar"),document.querySelector("#editAvatarButton")),v=document.querySelector("#pictureModal"),C=document.querySelector("#deleteCardModal"),g={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__save",inactiveButtonClass:"form__save_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"},S=Array.from(document.querySelectorAll(g.formSelector));let L=null;const y=new class{constructor(e){let{nameSelector:t,descriptionSelector:n,avatarSelector:s}=e;this._nameContainer=document.querySelector(t),this._descriptionContainer=document.querySelector(n),this._avatarContainer=document.querySelector(s)}getUserInfo(){return{name:this._nameContainer.textContent,about:this._descriptionContainer.textContent,avatar:this._avatarContainer.src}}setUserInfo(e){let{name:t,about:n}=e;this._nameContainer.textContent=t,this._descriptionContainer.textContent=n}getUserAvatar(){return this._avatarContainer.src}setUserAvatar(e){this._avatarContainer.src=e}}({nameSelector:".profile__info-name",descriptionSelector:".profile__info-description",avatarSelector:".profile__image-avatar"}),b=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_handleResponse(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._handleResponse)}getUserData(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._handleResponse)}updateUserInfo(e){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._handleResponse)}updateProfilePicture(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._handleResponse)}addNewCard(e){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._handleResponse)}deleteCard(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._handleResponse)}likeCard(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then(this._handleResponse)}unlikeCard(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then(this._handleResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"dfa974a3-627e-4477-8e0f-f2d5983e285f","Content-Type":"application/json"}});let k;Promise.all([b.getUserData(),b.getInitialCards()]).then((e=>{let[t,n]=e;y.setUserInfo(t),y.setUserAvatar(t.avatar),L=t._id,k=new o({data:n,renderer:q},".elements__grid"),k.renderItems()})).catch((e=>{console.log(e)}));const q=t=>{const n=new e(t,"#card-template",w,(()=>{T.openPopup((()=>{T.setLoadingText(!0),b.deleteCard(n.getId()).then((()=>{n.deleteCard(),T.closePopup()})).catch((e=>{console.log(e)})).finally((()=>{T.setLoadingText(!1)}))}))}),B,L),s=n.generateCard();k.addItem(s)},x=new r(d,(function(){const e={name:l.value,link:c.value};x.setLoadingText(!0),b.addNewCard(e).then((e=>{q(e),x.closePopup()})).catch((e=>{console.log(e)})).finally((()=>{x.setLoadingText(!1)}))}));x.setEventListeners();const I=new r(_,(function(){const e={name:i.value,about:a.value};I.setLoadingText(!0),b.updateUserInfo(e).then((e=>{y.setUserInfo(e),I.closePopup()})).catch((e=>{console.log(e)})).finally((()=>{I.setLoadingText(!1)}))}));I.setEventListeners();const P=new r(m,(function(){const e={avatar:E.value};P.setLoadingText(!0),b.updateProfilePicture(e).then((e=>{y.setUserAvatar(e.avatar),P.closePopup()})).catch((e=>{console.log(e)})).finally((()=>{P.setLoadingText(!1)}))}));P.setEventListeners();const T=new class extends s{constructor(e){super(e),this._formElement=this._popupElement.querySelector(".form"),this._buttonTextContainer=this._formElement.querySelector(".form__save"),this._defaultButtonText=this._buttonTextContainer.textContent}setLoadingText(e){this._buttonTextContainer.textContent=e?"Deleting...":this._defaultButtonText}openPopup(e){this._handleFormSubmit=e,super.openPopup()}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}}(C,(function(){b.deleteCard(card.getId()).then((()=>{card.deleteCard()})).catch((e=>{console.log(e)})),T.closePopup()}));T.setEventListeners();const U=new class extends s{constructor(e){super(e),this._popupImage=this._popupElement.querySelector(".modal__picture-image"),this._popupText=this._popupElement.querySelector(".modal__picture-text")}openPopup(e){this._popupImage.src=e.link,this._popupImage.alt=e.name,this._popupText.textContent=e.name,super.openPopup()}}(v);function B(e){e.isLikedByUser()?b.unlikeCard(e.getId()).then((t=>e.setLikes(t.likes))).catch((e=>console.log(e))):b.likeCard(e.getId()).then((t=>e.setLikes(t.likes))).catch((e=>console.log(e)))}function w(e){U.openPopup(e)}U.setEventListeners(),u.addEventListener("click",(function(){const e=y.getUserInfo();i.value=e.name,a.value=e.about,I.openPopup()})),h.addEventListener("click",(function(){x.openPopup()})),f.addEventListener("click",(function(){P.openPopup()})),S.forEach((e=>{!function(e,n){new t(e,n).enableValidation()}(g,e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,